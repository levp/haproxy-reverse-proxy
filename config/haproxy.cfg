###################################################################################################
# HAProxy configuration file.
#
# Author: Levi Perelman
# Author notes: Don't blame me if you change something and it stops working,
#   this while thing is kinda voodoo-ish. I'll do my best to document everything.
#
# Config reference: https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#4.1
# Note: There's an option to search-by-keyword in the "Keywords" tab on the left of the page. Use it.
###################################################################################################

# https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#4
# See above link for explanation about the four possible top-level sections:
#  - defaults [<name>]
#  - frontend <name>
#  - backend  <name>
#  - listen   <name>

# Stats?
frontend stats
  timeout client 2s
  mode http
  bind :8404
  stats enable
  stats uri /stats
  stats refresh 10s
  stats admin if LOCALHOST

###########################################################
# [frontend]
# A "frontend" section describes a set of listening sockets accepting client connections.
###########################################################
frontend localhost
  # Set the maximum inactivity time on the client side.  (https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#4-timeout%20client)
  timeout client 100ms

  # Sets the octal mode used to define access permissions on the UNIX socket.  (https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#5.1-mode)
  # Default is "tcp". We want "http".
  mode http 
  # Defines the binding parameters of the local peer of this "peers" section.  (https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#3.5-bind)
  # Listen for incoming connections on this port.
  bind :8080
  # Specify the backend to use when no "use_backend" rule has been matched.  (https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#4-default_backend)
  # The "backend" to which all incoming requests will be reverse-proxied to.
  default_backend reverse_proxy_target

  #####################################
  # Log requests
  #####################################

  # Enable logging of HTTP request, session state and timers.  (https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#4-option%20httplog)
  # option httplog
  # Specifies the log format string to use for traffic logs.  (https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#log-format)
  # Format options: https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#8.2.4
  # Also see: https://serverfault.com/questions/873973/http-request-duration-with-haproxy
  # log-format frontend:%f/%H/%fi:%fp\ GMT:%T\ request:%r\ body[%[capture.req.hdr(0)]]
  # log-format request[%r]\ body[%[capture.req.hdr(0)]]\ req[%TR\ ms]\ res[%Tr\ ms]\ total[%Ta\ ms]
  log-format %[capture.req.hdr(0)]
  # Enable or disable logging of null connections.  (https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#4-option%20dontlognull)
  option dontlognull
  # Enable per-instance logging of events and traffic.  (https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#4.2-log)
  # Log EVERYTHING to stdout.
  # log stdout format raw daemon
  log localhost:9999 user
  # This captures sample expression <sample> from the request buffer, and converts it to a string of at most <len> characters.  (https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#http-request%20capture)
  # Note: The actual value captured (here it's 'req.body') is known as a <sample>.
  #   Documentation about samples can be found here: https://www.haproxy.com/documentation/aloha/latest/traffic-management/lb-layer7/fetch-data-samples/#fetching-data-samples-from-layer-7
  http-request capture req.body len 65536

  # --- Another way to capture full request body, perhaps "better"? Or more customizeable? Compared to only using `http-request` with `len` option.
  # Enable or disable waiting for whole HTTP request body before proceeding.  (https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#4.2-log)
  # Note: Currently I don't know how to do full http request logging without this (maybe it's not possible).
  #   This seemingly makes the server wait for the entire HTTP request to arrive before it sends
  #   anything to the destination server, which is likely undesirable in most situations.
  ### option http-buffer-request
  # Declares a capture slot.  (https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#4.2-log)
  # Extra explanation about capture slots: https://www.haproxy.com/documentation/aloha/latest/traffic-management/lb-layer7/traffic-capture/
  ### declare capture request len 65536
  ### http-request capture req.body id 0

###########################################################
# [backend]
# A "backend" section describes a set of servers to which the proxy will connect to forward incoming connections.
###########################################################

backend reverse_proxy_target
  # Set the maximum time to wait for a connection attempt to a server to succeed.  (https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#4-timeout%20connect)
  timeout connect 100ms
  # Set the maximum inactivity time on the server side.  (https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#4-timeout%20connect)
  timeout server 100ms

  # Set the number of retries to perform on a server after a connection failure.  (https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#4.2-retries)
  retries 3 # default: 3

  mode http
  # <no short description>  (https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#3.5-server)
  # Forwards HTTP requests to this URL.
  server target_server localhost:3333

  # Associate a file contents to an HTTP error code.  (https://cbonte.github.io/haproxy-dconv/2.2/configuration.html#3.8-errorfile)
  # Note: The contents of the file represent the ENTIRE http response and not just the body, meaning we can also override the response code in the file.
  #   In this instance we replace the standard "504 Gateway Time-out" HAProxy message with a simple "204 No Body" response.
  #   The purpose of this change is to avoid the client seeing that the server is lacking performance, and instead make the client
  #   think that the server was not interested in the request and simply chose to react with an empty body.
  errorfile 504 /custom-http-responses/204.http
